import org.gradle.internal.logging.text.StyledTextOutputFactory

import static org.gradle.internal.logging.text.StyledTextOutput.Style

plugins {
    id "com.android.application"
    id "kotlin-android"
//    id "com.google.gms.google-services"
//    id "com.google.firebase.crashlytics"
}

android {
    namespace "info.hannes.edgedetection.demo"

    defaultConfig {
        applicationId "info.hannes.edgedetection.demo"
        minSdkVersion 21
        compileSdk 35
        targetSdkVersion 35
        versionCode getGitCommitCount()
        versionName getTag()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments useTestStorageService: "true"
        buildConfigField "String", "GIT_REPOSITORY", "\"" + getGitOriginRemote() + "\""
    }

    buildFeatures {
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }

    signingConfigs {
        def out = services.get(StyledTextOutputFactory).create("")
        if (System.env.USER == "hannes") {
            release {
                def keystore = "${project.gradle.gradleUserHomeDir}/../.android/debug.keystore"
                out.style(Style.Normal).text("I run with user hannes using ")
                        .style(Style.SuccessHeader).println(keystore)
                storePassword "android"
                keyPassword "android"
                keyAlias "androiddebugkey"
                storeFile file(keystore)
            }
        } else if (System.getenv("TRAVIS")) {
            release {
                out.style(Style.Normal).text("I run on TRAVIS")
                storeFile file("../signing/release.keystore")
                storePassword System.getenv("KEYSTORE_PASS")
                keyAlias System.getenv("ALIAS_NAME")
                keyPassword System.getenv("ALIAS_PASS")
            }
        } else {
            release {
                out.style(Style.Normal).text("I run on Github actions")
                storeFile file("../signing/release.keystore")
                storePassword System.getenv("KEYSTORE_PASS")
                keyAlias System.getenv("ALIAS_NAME")
                keyPassword System.getenv("ALIAS_PASS")
            }
        }
        debugCI {
            storeFile file("./debug.keystore")
            storePassword "android"
            keyPassword "android"
            keyAlias "androiddebugkey"
        }
    }

    buildTypes {

        release {
            if (!System.getenv("JITPACK")) {
                signingConfig signingConfigs.release
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }

        debug {
            if (System.getenv("CI") == "true") { // Github action
                signingConfig signingConfigs.debugCI
            }

            applicationIdSuffix ".debug"
            versionNameSuffix ".debug"
        }
    }

    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach { output ->
            if (variant.name == "release") {
                def builtType = variant.buildType.name
                def vName = variant.versionName
                def vCode = variant.versionCode
                // def flavor = variant.flavorName
                def newName = "EdgeDetection"
                newName += "-${vName}-${vCode}-${builtType}.apk"
                outputFileName = newName
            }
            println "$variant.name: name is $outputFileName"
        }
    }

    packagingOptions {
        pickFirst "META-INF/native-image/reflect-config.json"
        pickFirst "META-INF/native-image/resource-config.json"
    }
}

dependencies {
    implementation "androidx.appcompat:appcompat:1.7.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.7"
    implementation "androidx.constraintlayout:constraintlayout:2.2.1"

    implementation project(":library")
    implementation "com.github.AppDevNext.Logcat:LogcatCoreUI:3.3.1"
    releaseImplementation "com.github.AppDevNext.Logcat:LogcatCrashlyticLib:3.3.1"
    implementation "com.github.hannesa2:githubAppUpdate:2.3.1"

    implementation "androidx.core:core-ktx:1.16.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    testImplementation "junit:junit:4.13.2"
    androidTestImplementation "androidx.test.ext:junit-ktx:1.1.5"
    androidTestUtil "androidx.test.services:test-services:1.5.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.5.1"
    androidTestImplementation "androidx.test:rules:1.6.1" //    GrantPermissionRule
}

static def getGitOriginRemote() {
    def process = "git remote -v".execute()
    def values = process.text.toString().trim().split("\\r\\n|\\n|\\r")

    def found = values.find { it.startsWith("origin") && it.endsWith("(push)") }
    return found.replace("origin", "").replace("(push)", "").replace(".git", "").trim()
}

static def getLatestGitHash() {
    def process = "git rev-parse --short HEAD".execute()
    return process.text.toString().trim()
}

tasks.register('decryptPrivate') {
    def out = services.get(StyledTextOutputFactory).create("")

    def pass = "$System.env.CRYPT_PASS"
    if (pass.toString() == "null") {
        out.style(Style.Normal).text("In decrypt files the mandatory ")
                .style(Style.Failure).println("CRYPT_PASS not set")
                .style(Style.Normal).println("  If you want use Firebase features, please set it with ")
                .style(Style.SuccessHeader).println("  export CRYPT_PASS=<superSecret>")
        println ""
    } else {
        out.style(Style.Normal).text("decrypt files for ")
                .style(Style.SuccessHeader).text(getTag() + "." + getGitCommitCount() + "." + getLatestGitHash())
                .style(Style.Info).println(" DECRYPTED")
        println ""

        def process = "pwd".execute()
        println "pwd=" + process.text.toString().trim()
        println "projectDir=$projectDir"
        println ""

        def processDecrypt = "$projectDir/../signing/decrypt.sh".execute()
        processDecrypt.waitForProcessOutput(System.out, System.err)
    }
}

clean.dependsOn decryptPrivate

//apply plugin: "com.google.gms.google-services"